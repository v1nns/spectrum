name: CI Build

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_call:
    inputs:
      options:
        description: 'Pass options to build workflow'
        required: true
        type: string

env:
  # CMake build type
  BUILD_TYPE: Debug

jobs:
  pre_build:
    runs-on: ubuntu-latest
    steps:
      - name: Install external dependencies
        # Install ALSA, FFmpeg and FFTW3
        run:
          sudo apt-get install -y alsa-base alsa-utils pkg-config doxygen libasound2-dev libfftw3-dev
          libgtest-dev libavcodec-dev libavformat-dev libswresample-dev libavfilter-dev


  debug:
    runs-on: ubuntu-latest
    needs: pre_build
    steps:
      - uses: actions/checkout@v3

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory
        run:
          cmake -S .
          -B ${{github.workspace}}/build
          -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
          -DSPECTRUM_DEBUG=ON

      - name: Build
        # Build program
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}


  test:
    runs-on: ubuntu-latest
    needs: pre_build
    steps:
      - uses: actions/checkout@v3

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory
        run:
          cmake -S .
          -B ${{github.workspace}}/build
          -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
          -DENABLE_TESTS=ON

      - name: Build
        # Build program
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Test
        # Execute unit testing
        working-directory: ${{github.workspace}}/build
        run: ctest --test-dir ./test

  coverage:
    runs-on: ubuntu-latest
    needs: pre_build
    steps:
      - uses: actions/checkout@v3

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory
        run:
          cmake -S .
          -B ${{github.workspace}}/build
          -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
          -DENABLE_TESTS=ON
          -DENABLE_COVERAGE=ON

      - name: Build
        # Build program
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Test
        # Execute unit testing
        working-directory: ${{github.workspace}}/build
        run: ctest --test-dir ./test

      - name: Coverage
        # Check code coverage
        working-directory: ${{github.workspace}}/build
        run: gcovr --root ../ --html-details coverage
